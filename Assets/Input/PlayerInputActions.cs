//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlacementMode"",
            ""id"": ""578cd1fb-f033-4c9d-994f-1c254f702018"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""3bb575ba-befe-46b5-b1f5-c4bc966a4090"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""f0e15099-4dcd-4ce8-89d2-b2595346872a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""37895875-860c-4b20-96d5-4c9664419ad6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c19b69ab-058c-4005-9d92-8459c8544e89"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b2cf13a-1b62-436b-ab18-69db26cb873e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""934848b6-c2e3-486e-92a8-6bacf066e657"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlacementMode
        m_PlacementMode = asset.FindActionMap("PlacementMode", throwIfNotFound: true);
        m_PlacementMode_MousePosition = m_PlacementMode.FindAction("MousePosition", throwIfNotFound: true);
        m_PlacementMode_Place = m_PlacementMode.FindAction("Place", throwIfNotFound: true);
        m_PlacementMode_Exit = m_PlacementMode.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlacementMode
    private readonly InputActionMap m_PlacementMode;
    private List<IPlacementModeActions> m_PlacementModeActionsCallbackInterfaces = new List<IPlacementModeActions>();
    private readonly InputAction m_PlacementMode_MousePosition;
    private readonly InputAction m_PlacementMode_Place;
    private readonly InputAction m_PlacementMode_Exit;
    public struct PlacementModeActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlacementModeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_PlacementMode_MousePosition;
        public InputAction @Place => m_Wrapper.m_PlacementMode_Place;
        public InputAction @Exit => m_Wrapper.m_PlacementMode_Exit;
        public InputActionMap Get() { return m_Wrapper.m_PlacementMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlacementModeActions set) { return set.Get(); }
        public void AddCallbacks(IPlacementModeActions instance)
        {
            if (instance == null || m_Wrapper.m_PlacementModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlacementModeActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Place.started += instance.OnPlace;
            @Place.performed += instance.OnPlace;
            @Place.canceled += instance.OnPlace;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IPlacementModeActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Place.started -= instance.OnPlace;
            @Place.performed -= instance.OnPlace;
            @Place.canceled -= instance.OnPlace;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IPlacementModeActions instance)
        {
            if (m_Wrapper.m_PlacementModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlacementModeActions instance)
        {
            foreach (var item in m_Wrapper.m_PlacementModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlacementModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlacementModeActions @PlacementMode => new PlacementModeActions(this);
    public interface IPlacementModeActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnPlace(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
